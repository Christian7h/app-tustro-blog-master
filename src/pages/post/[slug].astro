---
import { Markdown } from "@astropub/md";
import BlogPost from '../../layouts/BlogPost.astro';
import { client } from '../../lib/tursoDb';
import type { Blog } from '../../lib/types';

const { slug } = Astro.params;
let post: Blog | null = null;

if (!slug) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found'
  });
}

try {
  const postResponse = await client.execute({
    sql: `
      SELECT posts.content, posts.published, posts.title, posts.description, posts.slug,
      posts.hero, posts.created_at, authors.first_name, authors.last_name,
      authors.slug, authors.avatar, authors.twitter 
      FROM posts 
      LEFT JOIN authors ON authors.id = posts.author_id 
      WHERE posts.slug = ?;
    `,
    args: [slug as string],
  });

  if (!postResponse.rows.length) {
    return new Response(null, {
      status: 404,
      statusText: 'Not found'
    });
  }

  const blogPostData = postResponse.rows[0] as any;

  post = {
    content: blogPostData.content,
    published: blogPostData.published,
    title: blogPostData.title,
    description: blogPostData.description,
    slug: blogPostData.slug,
    hero: blogPostData.hero,
    created_at: blogPostData.created_at,
    author: {
      first_name: blogPostData.first_name,
      last_name: blogPostData.last_name,
      slug: blogPostData.slug,
      avatar: blogPostData.avatar,
      email: blogPostData.email,
      socials: {
        twitter: blogPostData.twitter
      },
      created_at: blogPostData.created_at
    }
  };
} catch (error) {
  // Manejo de error
  console.error("Error fetching post:", error);
  return new Response(null, {
    status: 500,
    statusText: 'Internal Server Error'
  });
}
---

<BlogPost {...post}>
  <Markdown of={post?.content || ""} />
</BlogPost>
